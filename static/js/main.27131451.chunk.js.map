{"version":3,"sources":["services/PostData.js","components/Employee/ForgotPassword.js","components/NotFound/NotFound.js","components/Employee/Employee.js","components/Header/Header.js","components/Footer/Footer.js","components/MobileHeader/MobileHeader.js","App.js","serviceWorker.js","index.js"],"names":["PostData","type","userData","Promise","resolve","reject","fetch","BaseURL","method","headers","body","JSON","stringify","then","response","json","res","catch","error","Component","Employee","state","username","password","redirectToReferrer","employee","bind","onChange","this","result","responseJson","sessionStorage","setItem","setState","alert","e","target","name","value","to","getItem","className","id","placeholder","onClick","login","href","Header","props","Footer","MobileHeader","console","log","data-open","showSidebar","App","appName","home","data-off-canvas-wrapper","data-off-canvas-content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27131451.chunk.js","sourcesContent":["export function PostData(type, userData) {\r\n    let BaseURL = 'http://localhost/react-php/api/index.php';\r\n    return new Promise((resolve, reject) =>{\r\n    \r\n    fetch(BaseURL+'?tp='+type,\r\n    {\r\n    \r\n    method: 'POST',\r\n    headers:\r\n    {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json'\r\n    },\r\n    body:JSON.stringify(userData)\r\n    })\r\n    .then((response) => response.json()\r\n    .then((res) => {\r\n    resolve(res);\r\n    }))\r\n    .catch((error) => {\r\n    reject(error);\r\n    });\r\n    });\r\n    }","import React, {Component} from 'react';\r\nimport {PostData} from '../../services/PostData';\r\nimport {Redirect} from 'react-router-dom';\r\nclass ForgotPassword extends Component {\r\nconstructor(props){\r\nsuper(props);\r\nthis.state = {\r\nusername: '',\r\npassword: '',\r\nemail: '',\r\nname: '',\r\nredirectToReferrer: false\r\n};\r\nthis.forgotpassword = this.forgotpassword.bind(this);\r\nthis.onChange = this.onChange.bind(this);\r\n}\r\n\r\nforgotpassword() {\r\nif(this.state.username && this.state.password && this.state.email && this.state.name){\r\nPostData('signup',this.state).then((result) => {\r\nlet responseJson = result;\r\nif(responseJson.userData){\r\nsessionStorage.setItem('userData',JSON.stringify(responseJson));\r\nthis.setState({redirectToReferrer: true});\r\n}\r\nelse\r\nalert(result.error);\r\n});\r\n}\r\n}\r\nonChange(e){\r\nthis.setState({[e.target.name]:e.target.value});\r\n}\r\nrender() {\r\nif (this.state.redirectToReferrer || sessionStorage.getItem('userData')) {\r\nreturn (<Redirect to={'/home'}/>)\r\n}\r\nreturn (\r\n<div className=\"row \" id=\"sBody\">\r\n<div className=\"medium-5 columns left\">\r\n<h4>Forgot Password</h4>\r\n<input type=\"text\" name=\"email\" placeholder=\"Email\" onChange={this.onChange}/>\r\n<input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={this.onChange}/>\r\n<input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.onChange}/>\r\n<input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.onChange}/>\r\n<input type=\"submit\" className=\"button\" value=\"Sign Up\" onClick={this.signup}/>\r\n<a href=\"/employee\">Login</a>\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default ForgotPassword;","import React, {Component} from 'react';\r\nclass NotFound extends Component {\r\nrender() {\r\nreturn (\r\n<div className=\"row small-up-2 medium-up-3 large-up-4\" id=\"Body\">\r\n<div className=\"medium-12 columns\">\r\n<h2>404 Page</h2>\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default NotFound;","import React, {Component} from 'react';\r\nimport Routes from '../../routes';\r\nimport {Redirect, BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom';\r\nimport {PostData} from '../../services/PostData';\r\nclass Employee extends Component {\r\nconstructor(){\r\nsuper();\r\nthis.state = {\r\nusername: '',\r\npassword: '',\r\nredirectToReferrer: false\r\n};\r\nthis.employee = this.employee.bind(this);\r\nthis.onChange = this.onChange.bind(this);\r\n}\r\nemployee() {\r\nif(this.state.username && this.state.password){\r\nPostData('login',this.state).then((result) => {\r\nlet responseJson = result;\r\nif(responseJson.userData){\r\nsessionStorage.setItem('userData',JSON.stringify(responseJson));\r\nthis.setState({redirectToReferrer: true});\r\n}\r\nelse\r\nalert(result.error);\r\n});\r\n}\r\n}\r\nonChange(e){\r\nthis.setState({[e.target.name]:e.target.value});\r\n}\r\nrender() {\r\nif (this.state.redirectToReferrer) {\r\nreturn (<Redirect to={'/'}/>)\r\n}\r\nif(sessionStorage.getItem('userData')){\r\nreturn (<Redirect to={'/'}/>)\r\n}\r\nreturn (\r\n<div className=\"row\" id=\"Body\">\r\n<div className=\"medium-5 columns left\">\r\n\r\n<h4>Employee Login</h4>\r\n<input type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.onChange}/>\r\n<input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.onChange}/>\r\n<input type=\"submit\" className=\"button\" value=\"Login\" onClick={this.login}/>\r\n<a href=\"/forgetpassword\">Forget Password</a>\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Employee;","import React, { Component } from 'react';\r\nimport './Header.css';\r\nclass Header extends Component {\r\nrender() {\r\nreturn (\r\n<div className=\"callout headcolor\" id=\"Header\">\r\n<div className=\"row column\">\r\n<a href=\"/\"><h1 id=\"tit\">{this.props.name}</h1></a>\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\nclass Footer extends Component {\r\nrender() {\r\nreturn (\r\n<div className=\"row\" id=\"footer\">\r\n<div className=\"medium-12 columns\">\r\n<p>Copyright 2019 , <a href=\"https://neuralinfo.org\"> Neural</a></p>\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default Footer;","import React, {Component} from 'react';\r\nclass MobileHeader extends Component {\r\nshowSidebar(){\r\nconsole.log(\"HI\");\r\n}\r\nrender() {\r\nreturn (\r\n<div className=\"title-bar hide-for-large\">\r\n<div className=\"title-bar-left\">\r\n<button className=\"menu-icon\" type=\"button\" data-open=\"my-info\" onClick={this.showSidebar}></button>\r\n<span className=\"title-bar-title\">{this.props.name} </span>\r\n</div>\r\n</div>\r\n);\r\n}\r\n}\r\nexport default MobileHeader;","import React, { Component } from 'react';\nimport './styles/foundation.min.css';\nimport './styles/custom.css';\n\nimport Employee from './components/Employee/Employee';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport MobileHeader from './components/MobileHeader/MobileHeader';\nclass App extends Component {\nconstructor(){\nsuper();\nthis.state={\nappName: \"Performance Managment Process\",\nhome: false\n}\n}\nrender() {\nreturn (\n<div className=\"off-canvas-wrapper\">\n<div className=\"off-canvas-wrapper-inner\" data-off-canvas-wrapper>\n<div className=\"off-canvas-content\" data-off-canvas-content>\n<MobileHeader name={this.state.appName}/>\n<Header name={this.state.appName}/>\n<Employee name={this.state.appName}/>\n<hr/>\n<Footer/>\n</div>\n</div>\n</div>\n);\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}